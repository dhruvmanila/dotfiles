#!/usr/bin/env bash
set -e

# Debug prompt
export PS4="\e[1m==> \e[0m"

DOTFILES_DIRECTORY="${HOME}/dotfiles"
DEFAULT_SHELL="bash"

# First version will be the global one
PYTHON_VERSIONS=("3.9.1")

# These files/directories will be backed up before symlinking, if they exists.
BACKUP_DOTFILES=( \
  ~/.bash_profile \
  ~/.bashrc \
  ~/.gitconfig \
  ~/.inputrc \
  ~/.tmux.conf \
  ~/.vim
)

# Keep everything quoted due to spaces. Order: left to right
MACOS_DOCK_APPLICATIONS=( \
  "/Applications/Safari.app" \
  # "/Applications/Firefox.app" \
  "/Applications/Brave Browser.app" \
  # "/Applications/PyCharm CE.app" \
  # "/Applications/Visual Studio Code.app" \
  "/Applications/iTerm.app" \
  "/System/Applications/Notes.app" \
  "/Applications/Mark Text.app" \
  "/System/Applications/Music.app" \
  "/System/Applications/Books.app" \
  "/Applications/Slack.app" \
  "/Applications/Discord.app" \
  "/Applications/Docker.app"
)

# Colors
BOLD="\e[1m"
RESET_ALL="\e[0m"
# GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[1;33m"


function header() {
  printf "%b==> %s %b\n" "$BOLD" "$@" "$RESET_ALL"
}


function error() {
  printf "%bâœ— %s %b\n" "$RED" "$@" "$RESET_ALL"
}


function warning() {
  printf "%b! %s %b\n" "$YELLOW" "$@" "$RESET_ALL"
}


# Ask for confirmation before proceeding
function seek_confirmation() {
  printf "\n"
  warning "$@"
  read -rp "Continue? (y/n) " -n 1
  printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
function is_confirmed() {
  if [[ "$REPLY" =~ ^[Yy]$ ]]; then
    return 0
  fi
  return 1
}

# Ask the user for some information
function ask() {
  printf "%b[?] %s: %b" "$YELLOW" "$1" "$RESET_ALL"
  read -r
}


# Test whether we're in a git repo
function is_git_repo() {
  git rev-parse --is-inside-work-tree &> /dev/null
}


# Test whether a command exists
function command_exists() {
  if command -v "$1" > /dev/null; then
    return 0
  fi
  return 1
}


# Make directory if it doesn't exist in $HOME
function mkdir_in_home() {
  if [[ ! -d "${HOME}/$1" ]]; then
    mkdir "${HOME}/$1"
  fi
}


function setup_dotfiles_directory() {
  if [[ -d "$DOTFILES_DIRECTORY" ]]; then
    header "$DOTFILES_DIRECTORY already exists."
    return
  fi
  header "Downloading the dotfiles..."
  mkdir -p "${DOTFILES_DIRECTORY}"
  curl -fsSLo ~/dotfiles.tar.gz https://github.com/dhruvmanila/dotfiles/tarball/master

  header "Extracting the dotfiles..."
  tar -zxf "${HOME}/dotfiles.tar.gz" --strip-components 1 -C "${DOTFILES_DIRECTORY}"
  # Remove the tarball
  rm -rf ~/dotfiles.tar.gz
}


function setup_xcode_command_line_tools() {
  if xcode-select -p &> /dev/null; then
    header "Xcode command line tools are already installed."
    return
  fi
  header "Installing xcode command line tools..."
  xcode-select --install
  # wait until the tools are installed...
  until xcode-select -p &> /dev/null; do
    sleep 5;
  done
}


function setup_homebrew() {
  if command_exists 'brew'; then
    header "Homebrew is already installed."
    return
  fi
  header "Installing Homebrew..."
  # Install performs `brew update` but the homebrew-core tap is a shallow clone
  # https://github.com/Homebrew/brew/pull/9447
  # So, if the command fails and if the repository is shallow, we will run the
  # recommended command
  set +e
  if ! /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"; then
    error "Failure occured during Homebrew installation."
    # https://github.com/Homebrew/brew/pull/9383
    local core_location="/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core"

    header "Checking if homebrew-core is a shallow clone..."
    if [[ -f "${core_location}/.git/shallow" ]]; then
      header "Fetching everything from homebrew/homebrew-core (this may take a while)..."
      git -C $core_location fetch --unshallow
    else
      error "Unknown error while installing homebrew, exiting..."
      exit 1
    fi
  fi
  set -e
}


function setup_homebrew_packages() {
  # No auto update during the setup process
  export HOMEBREW_NO_AUTO_UPDATE=1

  header "Installing homebrew bundle tap..."
  brew tap homebrew/bundle

  header "Installing everything from Brewfile..."
  # -v: prints output from commands as they are run
  # --no-lock: don't output a Brewfile.lock.json file
  brew bundle install -v --no-lock --file ~/dotfiles/lib/Brewfile

  header "Cleaning up..."
  brew cleanup
}


function setup_default_shell() {
  # https://stackoverflow.com/a/41553295
  if dscl . -read ~/ UserShell | grep $DEFAULT_SHELL &> /dev/null; then
    header "$DEFAULT_SHELL is already the default shell."
    return
  fi
  local brew_prefix
  brew_prefix=$(brew --prefix)
  if ! grep -F -q "${brew_prefix}/bin/${DEFAULT_SHELL}" /etc/shells; then
    header "Adding brew-installed $DEFAULT_SHELL to /etc/shells..."
    echo "${brew_prefix}/bin/${DEFAULT_SHELL}" | sudo tee -a /etc/shells
  fi
  header "Switching to brew-installed ${DEFAULT_SHELL} as default shell..."
  sudo chsh -s "${brew_prefix}/bin/${DEFAULT_SHELL}"
}


function setup_dotfiles_git_repository() {
  header "Changing directory to $DOTFILES_DIRECTORY..."
  cd "$DOTFILES_DIRECTORY"
  if is_git_repo; then
    header "Dotfiles git repository is already initialized."
    cd -
    return
  fi
  header "Initializing Git repository..."
  set -x
  git init
  git remote add origin https://github.com/dhruvmanila/dotfiles
  git fetch --all
  git reset --hard FETCH_HEAD
  git branch --set-upstream-to origin/master master
  set +x
  cd -
}


function setup_python() {
  for python_version in "${PYTHON_VERSIONS[@]}"; do
    if ! pyenv versions | grep -q "${python_version}"; then
      header "Installing Python ${python_version}..."
      pyenv install "${python_version}"
      header "Upgrading pip for Python ${python_version}..."
      "$(pyenv root)/versions/${python_version}/bin/pip" install --upgrade pip
    else
      header "Python $python_version is already installed."
    fi
  done

  local pyenv_global_python="${PYTHON_VERSIONS[0]}"
  if [[ $(pyenv global) != "$pyenv_global_python" ]]; then
    header "Making ${pyenv_global_python} as the global Python version..."
    pyenv global "${pyenv_global_python}"
  fi

  header "Initiating pyenv..."
  eval "$(pyenv init -)"
}


function setup_python_global_packages() {
  local pyenv_global_python="${PYTHON_VERSIONS[0]}"
  header "Installing pipx for Python $pyenv_global_python..."
  "$(pyenv root)/versions/${pyenv_global_python}/bin/pip" install pipx

  local pipx_list
  pipx_list=$(pipx list)
  header "Installing packages from ${DOTFILES_DIRECTORY}/lib/requirements.txt..."
  while IFS= read -r package; do
    if ! echo "$pipx_list" | grep "$package" &> /dev/null; then
      pipx install "$package"
    else
      echo "==> $package is already installed in Python $pyenv_global_python"
    fi
  done < "${DOTFILES_DIRECTORY}/lib/requirements.txt"
}


# NOTE: This function should be called after symlinking the dotfiles
function setup_vim_plugins() {
  header "Upgrading vim plug..."
  vim +PlugUpgrade +qa
  header "Installing vim plugins..."
  vim +PlugInstall +qa
}


# NOTE: This function should be called after symlinking the dotfiles
function setup_tmux_plugins() {
  if ! [[ -d ~/.tmux/plugins/tpm ]]; then
    header "Installing tmux plugin manager..."
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi
  header "Installing tmux plugins..."
  ~/.tmux/plugins/tpm/bin/install_plugins
}


# NOTE: This function should be called after symlinking the dotfiles
function setup_github_ssh() {
  ssh -T git@github.com &> /dev/null
  if [[ $? -eq 1 ]]; then
    return
  fi
  local ssh_agent_env="${HOME}/.ssh/agent_env_${HOSTNAME}"
  local ssh_algorithm="ed25519"
  local ssh_filename="github"

  header "Generating SSH keys..."
  ask "Please provide an email address"
  ssh-keygen -f "${HOME}/.ssh/${ssh_filename}" -t "$ssh_algorithm" -C "$REPLY"

  header "Storing SSH agent information in ${ssh_agent_env}"
  ssh-agent > "${ssh_agent_env}"
  # shellcheck disable=SC1090
  source "${ssh_agent_env}"
  header "Adding SSH key to the ssh-agent..."
  ssh-add -K "${HOME}/.ssh/${ssh_filename}"

  header "Copied public SSH key to clipboard. Please add it to GitHub.com..."
  pbcopy < "${HOME}/.ssh/${ssh_filename}.pub"
  open "https://github.com/settings/ssh"
  for i in {1..6}; do
    ssh -T git@github.com &> /dev/null
    if [[ $? -eq 1 ]]; then
      header "Authentication successful."
      break
    else
      if [[ i -eq 6 ]]; then
        error "Exceeded max retries. Authenticate using 'ssh -T git@github.com' command."
        break
      fi
      error "Failed to authenticate. Retrying in 5 seconds..."
    fi
    sleep 5
  done
}


function backup_dotfiles() {
  local backup_dir
  local -i count=0
  backup_dir="${HOME}/dotfiles_$(date +"%Y_%m_%dT%H_%M_%S").backup"
  mkdir "$backup_dir"

  for location in "${BACKUP_DOTFILES[@]}"; do
    if [[ -f $location || -d $location ]]; then
      cp -R "$location" "$backup_dir"
      (( count+=1 ))
    fi
  done

  if (( count > 0 )); then
    header "Created backup in ${backup_dir}"
  else
    header "Skipped backup as there are no dotfiles"
    rm -rf "$backup_dir"
  fi
}


function link() {
  # Force create/replace the symlink.
  local source_file="${DOTFILES_DIRECTORY}/${1}"
  local target_file="${HOME}/${2}"
  if ! [[ -e "$target_file" ]]; then
    echo "==> $target_file -> $source_file"
    ln -fs "$source_file" "$target_file"
  fi
}


function setup_symlink() {
  # copy hushlogin as we are not going to be updating it
  cp "${DOTFILES_DIRECTORY}/assets/hushlogin" "${HOME}/.hushlogin"
  # Make necessary directories if they do not exist
  mkdir_in_home ".gnupg"
  mkdir_in_home ".ssh"
  mkdir_in_home ".config"
  # Create the necessary symbolic links between the `dotfiles` and `HOME`
  # directory. The `bashrc` sources other files directly from the
  # `dotfiles` repository.
  header "Creating the necessary symlinks..."
  # Bash
  link "bash/bashrc"                ".bashrc"
  link "bash/bash_profile"          ".bash_profile"
  # Neovim/Vim
  link "vim/vimrc"                  ".vimrc"
  link "vim"                        ".vim"
  link "config/nvim"                ".config/nvim"
  # Tmux
  link "tmux/tmux.conf"             ".tmux.conf"
  # Python
  link "python/flake8"              ".config/flake8"
  link "python/pylintrc"            ".pylintrc"
  link "python/ipython/ipython_config.py"  ".ipython/profile_default/ipython_config.py"
  link "python/ipython/startup"            ".ipython/profile_default/startup"
  # Shell
  link "assets/inputrc"             ".inputrc"
  link "assets/gitignore"           ".gitignore"
  link "assets/gitconfig"           ".gitconfig"
  link "assets/gpg/gpg.conf"        ".gnupg/gpg.conf"
  link "assets/gpg/gpg-agent.conf"  ".gnupg/gpg-agent.conf"
  link "assets/ssh/config"          ".ssh/config"
  # Mac
  link "mac/mackup.cfg"             ".mackup.cfg"
  link "mac/mackup"                 ".mackup"
  link "mac/karabiner"              ".config/karabiner"
  # CLI config
  link "config/broot"               ".config/broot"
  link "config/youtube-dl"          ".config/youtube-dl"
  link "config/bpytop"              ".config/bpytop"
  link "config/htop"                ".config/htop"
  link "config/luaformatter"        ".config/luaformatter"
  link "config/bottom"              "Library/Application Support/bottom"
  link "config/bat"                 ".config/bat"
  link "config/efm-langserver"      ".config/efm-langserver"
  link "config/kitty"               ".config/kitty"
}


function update_macos_settings() {
  header "Updating macOS settings..."
  bash "${DOTFILES_DIRECTORY}/lib/osxdefaults"
}


function update_macos_dock() {
  header "Updating macOS dock applications..."
  dockutil --remove all
  for app in "${MACOS_DOCK_APPLICATIONS[@]}"; do
    dockutil --add "$app" --section apps
  done

  dockutil \
    --add "${HOME}/Downloads" \
    --view grid \
    --display folder \
    --sort dateadded \
    --section others
}


function sync_lib_files() {
  # header "Syncing Brewfile with the currently installed packages..."
  # HOMEBREW_NO_AUTO_UPDATE=1 brew bundle dump -f
  header "Syncing requirements.txt with the global Python packages..."
  pipx list \
    | grep package \
    | cut -d ' ' -f5 > "${DOTFILES_DIRECTORY}/lib/requirements.txt"
}


function upgrade_homebrew() {
  header "Updating homebrew..."
  brew update
  header "Upgrading homebrew packages..."
  brew upgrade
  header "Cleaning up..."
  brew cleanup
}


function upgrade_python() {
  for python_version in "${PYTHON_VERSIONS[@]}"; do
    header "Upgrading pip for Python $python_version..."
    "$(pyenv root)/versions/${python_version}/bin/pip" install --upgrade pip
  done
  header "Upgrading pipx for Python ${PYTHON_VERSIONS[0]}..."
  "$(pyenv root)/versions/${PYTHON_VERSIONS[0]}/bin/pip" install --upgrade pipx
  header "Upgrading all pipx packages..."
  pipx upgrade-all
}


function upgrade_plugins() {
  header "Upgrading vim plugins..."
  vim +PlugUpgrade +PlugClean +PlugUpdate +qa
  header "Upgrading neovim plugins..."
  nvim +PackerSync +qa
  header "Cleaning tmux plugins..."
  ~/.tmux/plugins/tpm/bin/clean_plugins
  header "Updating tmux plugins..."
  ~/.tmux/plugins/tpm/bin/update_plugins all
}


function upgrade_cli_related() {
  header "Updating tldr data..."
  tldr --update
}


function perform_mackup_backup() {
  header "Performing mackup backup..."
  local mackup_test
  mackup_test="$(mackup -n backup)"
  echo "$mackup_test"
  if [[ -n $mackup_test ]]; then
    seek_confirmation "Above files will be backed up with mackup"
    if is_confirmed; then
      mackup backup
    fi
  else
    echo "==> No files to backup."
  fi
}


function perform_mackup_restore() {
  header "Performing mackup restore..."
  local mackup_test
  mackup_test="$(mackup -n restore)"
  echo "$mackup_test"
  if [[ -n $mackup_test ]]; then
    seek_confirmation "Above files will be restored with mackup"
    if is_confirmed; then
      mackup restore
    fi
  else
    echo "==> No files to restore."
  fi
}


function perform_all_functions() {
  setup_dotfiles_directory
  setup_xcode_command_line_tools
  setup_homebrew
  setup_homebrew_packages
  setup_dotfiles_git_repository
  setup_python
  setup_python_global_packages
  # No backup as this is a fresh setup
  setup_symlink
  setup_vim_plugins
  setup_tmux_plugins
  setup_github_ssh
  update_macos_settings
  update_macos_dock
  perform_mackup_restore
}


# Most of the functions have an initial check to determine whether they need to
# be run or not. Example: setup_homebrew checks whether homebrew is already
# installed or not.
case "$1" in
  backup)
    perform_mackup_backup
    ;;
  brew)
    setup_homebrew
    setup_homebrew_packages
    ;;
  dock)
    update_macos_dock
    ;;
  macos)
    update_macos_settings
    ;;
  link)
    case "$2" in
      -f | --force)
        setup_symlink
        ;;
      *)
        backup_dotfiles
        setup_symlink
        ;;
    esac
    ;;
  python)
    setup_python
    setup_python_global_packages
    ;;
  restore)
    perform_mackup_restore
    ;;
  shell)
    setup_default_shell
    ;;
  sync)
    sync_lib_files
    ;;
  upgrade)
    upgrade_homebrew
    upgrade_python
    upgrade_cli_related
    upgrade_plugins
    ;;
  all)
    perform_all_functions
    ;;
  *)
    # Default behavior is to do a fresh setup unless the dotfiles directory is
    # already present.
    if ! [[ -d "$DOTFILES_DIRECTORY" ]]; then
      perform_all_functions
    else
      printf "Usage: %s " "$(basename "$0")"
      printf "{all|backup|brew|dock|macos|link|python|restore|shell|sync|upgrade} "
      printf "[-f/--force]\n"
    fi
    ;;
esac
