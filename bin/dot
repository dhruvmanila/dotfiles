#!/usr/bin/env bash
set -e

# Debug prompt
export PS4="\e[1m==> \e[0m"

# Global constants
# Default shell {{{
DEFAULT_SHELL="bash"
# }}}
# Common directories {{{
DOTFILES_DIRECTORY="${HOME}/dotfiles"
NEOVIM_DIRECTORY="${HOME}/contributing/neovim"
NEOVIM_INSTALL_DIRECTORY="${HOME}/neovim"
# }}}
# Python versions {{{
# First version will be the global one
PYTHON_VERSIONS=("3.9.4" "3.9.1")
# }}}
# Packages file {{{
HOMEBREW_BUNDLE_FILE="${DOTFILES_DIRECTORY}/lib/Brewfile"
PYTHON_GLOBAL_REQUIREMENTS="${DOTFILES_DIRECTORY}/lib/requirements.txt"
NPM_GLOBAL_PACKAGES="${DOTFILES_DIRECTORY}/lib/node_modules.txt"
# }}}
# Required directories {{{
REQUIRED_DIRECTORIES=(
  ~/.config
  ~/.gnupg
  ~/.ssh
  ~/contributing
  ~/git
  ~/neovim
  ~/playground
  ~/projects
)
# }}}
# Backup dotfiles {{{
# These files/directories will be backed up before symlinking, if they exists.
BACKUP_DOTFILES=(
  ~/.bash_profile
  ~/.bashrc
  ~/.config
  ~/.gitconfig
  ~/.inputrc
  ~/.tmux.conf
  ~/.vim
)
# }}}
# MacOS dock applications {{{
# Keep everything quoted due to spaces. Order: left to right
MACOS_DOCK_APPLICATIONS=(
  "/Applications/Safari.app"
  # "/Applications/Firefox.app" \
  "/Applications/Brave Browser.app"
  # "/Applications/PyCharm CE.app" \
  # "/Applications/Visual Studio Code.app" \
  # "/Applications/iTerm.app"
  "/Applications/kitty.app"
  "/System/Applications/Notes.app"
  "/Applications/Mark Text.app"
  "/System/Applications/Music.app"
  "/System/Applications/Books.app"
  "/Applications/Slack.app"
  "/Applications/Discord.app"
  "/Applications/Docker.app"
)
# }}}
# Colors {{{
BOLD="\e[1m"
RESET_ALL="\e[0m"
# GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[1;33m"
# }}}

# Utility functions
function header() { # {{{
  # Logging helper for providing a description about the upcoming command.
  #
  # $1 (string): command description
  # outputs: Log to stdout in bold color.
  printf "\n%b==> %s %b\n" "$BOLD" "$1" "$RESET_ALL"
}
# }}}
function error() { # {{{
  # Logging helper for providing the error message for the last command.
  #
  # $1 (string): error description
  # outputs: Log to stdout in red color.
  printf "%bâœ— %s %b\n" "$RED" "$1" "$RESET_ALL"
}
# }}}
function warning() { # {{{
  # Logging helper for providing the warning message for the last command.
  #
  # $1 (string): warning description
  # outputs: Log to stdout in yellow color.
  printf "%b! %s %b\n" "$YELLOW" "$1" "$RESET_ALL"
}
# }}}
function seek_confirmation() { # {{{
  # Ask for confirmation before proceeding.
  #
  # This is to be used in conjunction with `is_confirmed` to know the
  # response of the user.
  #
  # $1 (string): confirmation description
  # outputs: Provide warning message asking for confirmation.
  printf "\n"
  warning "$1"
  read -rp "Continue? (y/n) " -n 1
  printf "\n"
}
# }}}
function is_confirmed() { # {{{
  # Test whether the result of an 'ask' is a confirmation.
  #
  # This is to be used in conjunction with `seek_confirmation` to provide
  # the confirmation prompt.
  #
  # return: 0 if the answer was a '[Yy]es', 1 on anything else.
  if [[ "$REPLY" =~ ^[Yy]$ ]]; then
    return 0
  fi
  return 1
}
# }}}
function ask() { # {{{
  # Ask the user for some information.
  #
  # This is similar to `seek_confirmation`, although this does not require either
  # a 'yes' or 'no'. The response from the user is stored in `$REPLY` environment
  # variable and is to be extracted from there.
  #
  # $1 (string): message
  # outputs: Provide warning message asking for information.
  printf "%b[?] %s: %b" "$YELLOW" "$1" "$RESET_ALL"
  read -r
}
# }}}
function is_git_repo() { # {{{
  git rev-parse --is-inside-work-tree &> /dev/null
}
# }}}
function command_exists() { # {{{
  # Test whether a command exists.
  #
  # $1 (string): the command name to check
  # return: 0 if it exists, 1 otherwise
  if command -v "$1" > /dev/null; then
    return 0
  fi
  return 1
}
# }}}

# Setup functions
function setup_required_directories() { # {{{
  # Helper function to create the required directories mentioned in
  # `REQUIRED_DIRECTORIES` global variable.
  header "Setting up the required directories..."
  for directory in "${REQUIRED_DIRECTORIES[@]}"; do
    if ! [[ -d $directory ]]; then
      mkdir -p "$directory"
      echo "    Created $directory"
    fi
  done
}
# }}}
function setup_dotfiles_directory() { # {{{
  # Setup the dotfiles directory on a fresh setup.
  #
  # This is suppose to be used when the script was downloaded directly. It won't
  # proceed if the dotfiles directory is already present. If not, then it will
  # download the tarball from GitHub and extract it out to the appropriate location.
  if [[ -d "$DOTFILES_DIRECTORY" ]]; then
    header "$DOTFILES_DIRECTORY already exists."
    return
  fi
  header "Downloading the dotfiles..."
  mkdir -p "${DOTFILES_DIRECTORY}"
  curl -fsSLo ~/dotfiles.tar.gz https://github.com/dhruvmanila/dotfiles/tarball/master

  header "Extracting the dotfiles..."
  tar -zxf "${HOME}/dotfiles.tar.gz" --strip-components 1 -C "${DOTFILES_DIRECTORY}"
  rm -rf ~/dotfiles.tar.gz
}
# }}}
function setup_xcode_command_line_tools() { # {{{
  # Setup xcode command line tools if they are absent from the system.
  #
  # This runs the command which installs the tools using a GUI tool so it will
  # enter an infinite loop until it finds the tools.
  if xcode-select -p &> /dev/null; then
    header "Xcode command line tools are already installed."
    return
  fi
  header "Installing xcode command line tools..."
  xcode-select --install
  # wait until the tools are installed...
  until xcode-select -p &> /dev/null; do
    sleep 5
  done
}
# }}}
function setup_homebrew() { # {{{
  # Setup homebrew using the recommended method.
  #
  # Install performs `brew update` but the homebrew-core tap is a shallow clone
  # So, if the command fails and if the repository is shallow, we will run the
  # recommended command.
  # Ref: https://github.com/Homebrew/brew/pull/9447
  if command_exists 'brew'; then
    header "Homebrew is already installed."
    return
  fi
  header "Installing Homebrew..."
  set +e
  if ! /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"; then
    error "Failure occured during Homebrew installation."
    # https://github.com/Homebrew/brew/pull/9383
    local core_location="/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core"

    header "Checking if homebrew-core is a shallow clone..."
    if [[ -f "${core_location}/.git/shallow" ]]; then
      header "Fetching everything from homebrew/homebrew-core (this may take a while)..."
      git -C $core_location fetch --unshallow
    else
      error "Unknown error while installing homebrew, exiting..."
      exit 1
    fi
  fi
  set -e
}
# }}}
function setup_homebrew_packages() { # {{{
  # Setup all the packages required using homebrew and Brewfile present in the
  # lib directory.
  # No auto update during the setup process
  export HOMEBREW_NO_AUTO_UPDATE=1

  header "Installing homebrew bundle tap..."
  brew tap homebrew/bundle

  header "Installing everything from Brewfile..."
  # -v: prints output from commands as they are run
  # --no-lock: don't output a Brewfile.lock.json file
  brew bundle install -v --no-lock --file "$HOMEBREW_BUNDLE_FILE"

  header "Cleaning up..."
  brew cleanup
}
# }}}
function setup_default_shell() { # {{{
  # Setup the default shell as mentioned in the DEFAULT_SHELL global variable.
  #
  # This will skip if the shell is already the default one.
  #
  # Assumption: The shells are assumed to be installed using homebrew as it uses
  # the shell path in homebrew directory to change the default shell.
  # https://stackoverflow.com/a/41553295
  if dscl . -read ~/ UserShell | grep $DEFAULT_SHELL &> /dev/null; then
    header "$DEFAULT_SHELL is already the default shell."
    return
  fi
  local brew_prefix
  brew_prefix=$(brew --prefix)
  if ! grep -F -q "${brew_prefix}/bin/${DEFAULT_SHELL}" /etc/shells; then
    header "Adding brew-installed $DEFAULT_SHELL to /etc/shells..."
    echo "${brew_prefix}/bin/${DEFAULT_SHELL}" | sudo tee -a /etc/shells
  fi
  header "Switching to brew-installed ${DEFAULT_SHELL} as default shell..."
  sudo chsh -s "${brew_prefix}/bin/${DEFAULT_SHELL}"
}
# }}}
function setup_dotfiles_git_repository() { # {{{
  header "Changing directory to $DOTFILES_DIRECTORY..."
  cd "$DOTFILES_DIRECTORY"
  if is_git_repo; then
    header "Dotfiles git repository is already initialized."
    cd -
    return
  fi
  header "Initializing Git repository..."
  set -x
  git init
  git remote add origin https://github.com/dhruvmanila/dotfiles
  git fetch --all
  git reset --hard FETCH_HEAD
  git branch --set-upstream-to origin/master master
  set +x
  cd -
}
# }}}
function setup_python() { # {{{
  for python_version in "${PYTHON_VERSIONS[@]}"; do
    if ! pyenv versions | grep -q "${python_version}"; then
      header "Installing Python ${python_version}..."
      pyenv install "${python_version}"
    else
      header "Python $python_version is already installed."
    fi
    header "Upgrading pip for Python ${python_version}..."
    "$(pyenv root)/versions/${python_version}/bin/pip" install --upgrade pip
  done

  local pyenv_global_python="${PYTHON_VERSIONS[0]}"
  if [[ $(pyenv global) != "$pyenv_global_python" ]]; then
    header "Making ${pyenv_global_python} as the global Python version..."
    pyenv global "${pyenv_global_python}"
  fi

  header "Initiating pyenv..."
  eval "$(pyenv init -)"
  header "Rehashing pyenv shims..."
  pyenv rehash
}
# }}}
function setup_python_global_packages() { # {{{
  if ! command_exists "pipx"; then
    header "Installing pipx from homebrew..."
    brew install pipx
  fi

  local pyenv_global_python
  local pipx_list
  pyenv_global_python="$(pyenv global)"
  pipx_list=$(pipx list)
  header "Installing packages from ${PYTHON_GLOBAL_REQUIREMENTS}..."
  while IFS= read -r package; do
    if ! echo "$pipx_list" | grep "$package" &> /dev/null; then
      pipx install "$package"
    else
      echo "    $package is already installed in Python $pyenv_global_python"
    fi
  done < "${PYTHON_GLOBAL_REQUIREMENTS}"
}
# }}}
function setup_npm_global_packages() { # {{{
  local npm_list
  npm_list=$(npm --global list)
  header "Installing packages from ${NPM_GLOBAL_PACKAGES}..."
  while IFS= read -r package; do
    if ! echo "$npm_list" | grep "$package" &> /dev/null; then
      npm --global install "$package"
    else
      echo "    $package is already installed"
    fi
  done < "${NPM_GLOBAL_PACKAGES}"
}
# }}}
function setup_tmux_plugins() { # {{{
  # NOTE: This function should be called after symlinking the dotfiles
  if ! [[ -d ~/.tmux/plugins/tpm ]]; then
    header "Installing tmux plugin manager..."
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi
  header "Installing tmux plugins..."
  ~/.tmux/plugins/tpm/bin/install_plugins
}
# }}}
function setup_github_ssh() { # {{{
  # NOTE: This function should be called after symlinking the dotfiles
  ssh -T git@github.com &> /dev/null
  if [[ $? -eq 1 ]]; then
    return
  fi
  local ssh_agent_env="${HOME}/.ssh/agent_env_${HOSTNAME}"
  local ssh_algorithm="ed25519"
  local ssh_filename="github"

  header "Generating SSH keys..."
  ask "Please provide an email address"
  ssh-keygen -f "${HOME}/.ssh/${ssh_filename}" -t "$ssh_algorithm" -C "$REPLY"

  source "$(ssh-agent)"
  header "Adding SSH key to the ssh-agent..."
  ssh-add -K "${HOME}/.ssh/${ssh_filename}"

  header "Copied public SSH key to clipboard. Please add it to GitHub.com..."
  pbcopy < "${HOME}/.ssh/${ssh_filename}.pub"
  open "https://github.com/settings/ssh"
  for i in {1..6}; do
    ssh -T git@github.com &> /dev/null
    if [[ $? -eq 1 ]]; then
      header "Authentication successful."
      break
    else
      if [[ i -eq 6 ]]; then
        error "Exceeded max retries. Authenticate using 'ssh -T git@github.com' command."
        break
      fi
      error "Failed to authenticate. Retrying in 5 seconds..."
    fi
    sleep 5
  done
}
# }}}
function setup_neovim_nightly() { # {{{
  curr_dir=$(pwd)
  header "Setting up Neovim nightly..."
  git clone --depth=1 git@github.com:dhruvmanila/neovim.git $NEOVIM_DIRECTORY
  cd "$NEOVIM_DIRECTORY"
  git checkout master
  git remote add upstream git@github.com:neovim/neovim.git
  make \
    CMAKE_BUILD_TYPE=Release \
    CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$NEOVIM_INSTALL_DIRECTORY"
  make install
  cd $curr_dir
}
# }}}
function setup_lua_language_server() { # {{{
  local curr_dir=$(pwd)
  header "Setting up the lua language server..."
  git clone --depth=1 git@github.com:sumneko/lua-language-server.git ~/git/
  cd ~/git/lua-language-server
  git checkout master
  git submodule update --init --recursive
  cd 3rd/luamake
  compile/install.sh
  cd ../..
  ./3rd/luamake/luamake rebuild
  cd $curr_dir
}
# }}}

# Symlink setup
function backup_dotfiles() { # {{{
  local backup_dir
  local -i count=0
  backup_dir="${HOME}/dotfiles_$(date +"%Y_%m_%dT%H_%M_%S").backup"
  mkdir "$backup_dir"

  for location in "${BACKUP_DOTFILES[@]}"; do
    if [[ -f $location || -d $location ]]; then
      cp -R "$location" "$backup_dir"
      ((count += 1))
    fi
  done

  if ((count > 0)); then
    header "Created backup in ${backup_dir}"
  else
    header "Skipped backup as there are no dotfiles"
    rm -rf "$backup_dir"
  fi
}
# }}}
function link() { # {{{
  # Force create/replace the symlink.
  local source_file="${DOTFILES_DIRECTORY}/${1}"
  local target_file="${HOME}/${2}"
  if ! [[ -e "$target_file" ]]; then
    echo "==> $target_file -> $source_file"
    ln -fs "$source_file" "$target_file"
  fi
}
# }}}
function setup_symlink() { # {{{
  # copy hushlogin as we are not going to be updating it
  cp "${DOTFILES_DIRECTORY}/assets/hushlogin" "${HOME}/.hushlogin"
  # Create the necessary symbolic links between the `dotfiles` and `HOME`
  # directory. The `bashrc` sources other files directly from the
  # `dotfiles` repository.
  header "Creating the necessary symlinks..."
  link ".editorconfig"                     ".editorconfig"
  # Bash
  link "bash/bashrc"                       ".bashrc"
  link "bash/bash_profile"                 ".bash_profile"
  # Neovim/Vim
  link "vim/vimrc"                         ".vimrc"
  link "vim"                               ".vim"
  link "config/nvim"                       ".config/nvim"
  # Tmux
  link "tmux/tmux.conf"                    ".tmux.conf"
  # Python
  link "python/flake8"                     ".config/flake8"
  link "python/pylintrc"                   ".pylintrc"
  link "python/ipython/ipython_config.py"  ".ipython/profile_default/ipython_config.py"
  link "python/ipython/startup"            ".ipython/profile_default/startup"
  # Git
  link "assets/git/gitignore"              ".gitignore"
  link "assets/git/gitconfig"              ".gitconfig"
  link "assets/git/gitmessage"             ".gitmessage"
  # Shell
  link "assets/inputrc"                    ".inputrc"
  link "assets/gpg/gpg.conf"               ".gnupg/gpg.conf"
  link "assets/gpg/gpg-agent.conf"         ".gnupg/gpg-agent.conf"
  link "assets/ssh/config"                 ".ssh/config"
  # Mac
  link "mac/mackup.cfg"                    ".mackup.cfg"
  link "mac/mackup"                        ".mackup"
  link "mac/karabiner"                     ".config/karabiner"
  # CLI config
  link "config/youtube-dl"                 ".config/youtube-dl"
  link "config/bpytop"                     ".config/bpytop"
  link "config/htop"                       ".config/htop"
  link "config/bottom"                     "Library/Application Support/bottom"
  link "config/bat"                        ".config/bat"
  link "config/kitty"                      ".config/kitty"
  link "config/glow"                       "Library/Preferences/glow"
}
# }}}

# MacOS setup
function update_macos_settings() { # {{{
  header "Updating macOS settings..."
  bash "${DOTFILES_DIRECTORY}/lib/osxdefaults"
}
# }}}
function update_macos_dock() { # {{{
  header "Updating macOS dock applications..."
  dockutil --remove all
  for app in "${MACOS_DOCK_APPLICATIONS[@]}"; do
    dockutil --add "$app" --section apps
  done

  dockutil \
    --add "${HOME}/Downloads" \
    --view grid \
    --display folder \
    --sort dateadded \
    --section others
}
# }}}

# Upgrade functions
function sync_lib_files() { # {{{
  header "Syncing Brewfile with the currently installed packages..."
  HOMEBREW_NO_AUTO_UPDATE=1 brew bundle dump -f --describe

  header "Syncing requirements.txt with the global Python packages..."
  pipx list --json \
    | jq -r '.venvs | keys | join("\n")' \
    | tee "${PYTHON_GLOBAL_REQUIREMENTS}" \
    | xargs -I{} echo "    {}"

  header "Syncing node_modules.txt with the global Node packages..."
  npm --global --json list \
    | jq -r '.dependencies | keys | join("\n")' \
    | tee "${NPM_GLOBAL_PACKAGES}" \
    | xargs -I{} echo "    {}"
}
# }}}
function upgrade_homebrew() { # {{{
  header "Updating homebrew and packages..."
  brew update
  brew upgrade
  brew cleanup
}
# }}}
function upgrade_packages() { # {{{
  for python_version in "${PYTHON_VERSIONS[@]}"; do
    header "Upgrading pip for Python $python_version..."
    "$(pyenv root)/versions/${python_version}/bin/pip" install --upgrade pip
  done
  header "Upgrading all pipx packages..."
  pipx upgrade-all
  header "Upgrading all npm packages..."
  npm --global upgrade
}
# }}}
function upgrade_plugins() { # {{{
  # Not quiting vim/neovim to check what's new
  header "Upgrading vim plugins..."
  vim +PlugUpgrade +PlugClean +PlugUpdate
  header "Upgrading neovim plugins..."
  nvim +PackerSync
  header "Cleaning and updating tmux plugins..."
  ~/.tmux/plugins/tpm/bin/clean_plugins
  ~/.tmux/plugins/tpm/bin/update_plugins all
}
# }}}
function upgrade_cli_related() { # {{{
  header "Updating tldr data..."
  tldr --update
}
# }}}
function upgrade_neovim_nightly() { # {{{
  curr_dir=$(pwd)
  header "Upgrading Neovim nightly..."
  cd "$NEOVIM_DIRECTORY"
  git checkout master
  curr_hash=$(git rev-parse HEAD)
  git pull upstream master
  new_hash=$(git rev-parse HEAD)

  if [[ "$curr_hash" == "$new_hash" ]]; then
    echo "==> Skipping Neovim upgrade as it is already up to date."
    return
  fi

  git push origin master
  make distclean
  make \
    CMAKE_BUILD_TYPE=Release \
    CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$NEOVIM_INSTALL_DIRECTORY"
  make install
  cd $curr_dir
}
# }}}
function upgrade_lua_language_server() { # {{{
  # https://github.com/sumneko/lua-language-server/wiki/Build-and-Run-(Standalone)
  local curr_dir=$(pwd)
  header "Upgrading the lua language server..."
  cd ~/git/lua-language-server
  git checkout master
  curr_hash=$(git rev-parse HEAD)
  git pull origin master
  new_hash=$(git rev-parse HEAD)

  if [[ "$curr_hash" == "$new_hash" ]]; then
    echo "==> Skipping lua-language-server upgrade as it is already up to date."
    return
  fi

  git submodule update --init --recursive
  cd 3rd/luamake
  compile/install.sh
  cd ../..
  ./3rd/luamake/luamake rebuild
  cd $curr_dir
}
# }}}

# Mackup
function perform_mackup_backup() { # {{{
  header "Performing mackup backup..."
  local mackup_test
  mackup_test="$(mackup -n backup)"
  echo "$mackup_test"
  if [[ -n $mackup_test ]]; then
    seek_confirmation "Above files will be backed up with mackup"
    if is_confirmed; then
      mackup backup
    fi
  else
    echo "==> No files to backup."
  fi
}
# }}}
function perform_mackup_restore() { # {{{
  header "Performing mackup restore..."
  local mackup_test
  mackup_test="$(mackup -n restore)"
  echo "$mackup_test"
  if [[ -n $mackup_test ]]; then
    seek_confirmation "Above files will be restored with mackup"
    if is_confirmed; then
      mackup restore
    fi
  else
    echo "==> No files to restore."
  fi
}
# }}}

# Main
function perform_all_functions() { # {{{
  setup_required_directories
  setup_dotfiles_directory
  setup_xcode_command_line_tools
  setup_homebrew
  setup_homebrew_packages
  setup_dotfiles_git_repository
  setup_python
  setup_python_global_packages
  setup_npm_global_packages
  setup_neovim_nightly
  setup_lua_language_server
  # No backup as this is a fresh setup
  setup_symlink
  setup_tmux_plugins
  setup_github_ssh
  update_macos_settings
  update_macos_dock
  perform_mackup_restore
}
# }}}
function usage() { # {{{
  echo "Usage: $(basename "$0") [-h|--help] <command> [<flags>|<commands>]"
  echo ""
  echo "COMMANDS:"
  echo ""
  echo "  all            perform all setup functions"
  echo "  backup         perform backup with mackup"
  echo "  brew           setup homebrew and install required packages"
  echo "  dir            setup required directories"
  echo "  dock           update macOS dock applications"
  echo "  macos          update macOS settings"
  echo "  link           backup and symlink dotfiles"
  echo "  package        setup global packages"
  echo "  python         setup python and global packages"
  echo "  restore        perform restore with mackup"
  echo "  shell          update default shell"
  echo "  sync           sync lib files with global packages"
  echo "  upgrade        perform upgrades"
  echo ""
  echo "Flags:"
  echo ""
  echo "  -f, --force    skip dotfiles backup for 'link' command"
  echo "  -h, --help     show this help and exit"
  echo "  -a, --all      upgrade everything for 'upgrade' command"
  echo ""
  echo "Upgrade sub-commands:"
  echo ""
  echo "  brew           brew and installed packages"
  echo "  packages       language specific installed packages"
  echo "  cli            cli related upgrades"
  echo "  neovim         neovim nightly"
  echo "  plugins        vim/neovim/tmux plugins"
  echo "  lua_lsp        lua language server (sumneko lua)"
}
# }}}
# Main entrypoint {{{
# Most of the functions have an initial check to determine whether they need to
# be run or not. Example: setup_homebrew checks whether homebrew is already
# installed or not.
case "$1" in
  all)
    seek_confirmation "'all' command should only run on fresh setup!"
    if is_confirmed; then
      perform_all_functions
    fi
    ;;
  backup)
    perform_mackup_backup
    ;;
  brew)
    setup_homebrew
    setup_homebrew_packages
    ;;
  dir)
    setup_required_directories
    ;;
  dock)
    update_macos_dock
    ;;
  macos)
    update_macos_settings
    ;;
  link)
    case "$2" in
      -f | --force)
        setup_symlink
        ;;
      *)
        backup_dotfiles
        setup_symlink
        ;;
    esac
    ;;
  package)
    setup_python_global_packages
    setup_npm_global_packages
    ;;
  python)
    setup_python
    setup_python_global_packages
    ;;
  restore)
    perform_mackup_restore
    ;;
  shell)
    setup_default_shell
    ;;
  sync)
    sync_lib_files
    ;;
  upgrade)
    case "$2" in
      brew)
        upgrade_homebrew
        ;;
      packages)
        upgrade_packages
        ;;
      cli)
        upgrade_cli_related
        ;;
      plugins)
        upgrade_plugins
        ;;
      neovim)
        upgrade_neovim_nightly
        ;;
      lua_lsp)
        upgrade_lua_language_server
        ;;
      -a | --all)
        upgrade_homebrew
        upgrade_packages
        upgrade_cli_related
        upgrade_plugins
        upgrade_neovim_nightly
        upgrade_lua_language_server
        ;;
    esac
    ;;
  -h | --help)
    usage
    ;;
  *)
    # Default behavior is to do a fresh setup unless the dotfiles directory is
    # already present.
    if ! [[ -d "$DOTFILES_DIRECTORY" ]]; then
      perform_all_functions
    else
      usage
    fi
    ;;
esac
# }}}

# vim: foldmethod=marker
