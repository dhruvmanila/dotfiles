#!/usr/bin/env bash
#
# A small utility script to manage Python versions using the `python-build`
# command in a manner similar to `pyenv`.

set -e
[[ -n "$PYENV_TRACE" ]] && set -x

version="v0.7.0"

: "${CMD:=$(basename "$0")}"
: "${PYENV_ROOT:="$HOME/.pyenv"}"
: "${PYTHON_BUILD_PREFIX:="$HOME/.local"}"
: "${PYTHON_BUILD_CACHE_PATH:="$PYENV_ROOT/cache"}"

PYTHON_BUILD_BIN="$PYTHON_BUILD_PREFIX/bin/python-build"

function debug() {
  if [[ -n "$PYENV_DEBUG" ]]; then
    echo "==> $1"
  fi
}

debug "$CMD version: $version"
debug "PYENV_ROOT: $PYENV_ROOT"
debug "PYTHON_BUILD_PREFIX: $PYTHON_BUILD_PREFIX"
debug "PYTHON_BUILD_BIN: $PYTHON_BUILD_BIN"
debug "PYTHON_BUILD_CACHE_PATH: $PYTHON_BUILD_CACHE_PATH"

if [[ ! -d "$PYENV_ROOT" ]]; then
  mkdir -p "$PYENV_ROOT/"{versions,cache}
  touch "$PYENV_ROOT/version"
fi

function usage() {
  echo "Personal tool for managing multiple Python versions"
  echo ""
  echo "Usage:"
  echo "  $CMD [command]"
  echo "  $CMD [command] --help | -h"
  echo "  $CMD --version | -v"
  echo ""
  echo "Commands:"
  echo "  global        set or show the global Python version"
  echo "  install       install Python version using python-build"
  echo "  uninstall     uninstall a specific Python version"
  echo "  versions      list all the installed Python versions"
  echo "  link          link all available Python versions to '$HOME/.local/bin'"
  echo "  root          display root directory where versions are kept"
  echo "  update-deps   update installed dependencies"
  echo "  install-deps  install dependency (python-build)"
}

# Install/Update the `python-build` command under $PREFIX (default: /use/local)
#
# $1 (string): 'install' or 'update'
function python-build() {
  case "$1" in
    install)
      echo "$CMD: Installing 'python-build'..."
      git -C "$PYENV_ROOT" clone https://github.com/pyenv/pyenv
      ;;
    update)
      echo "$CMD: Updating 'python-build'..."
      git -C "$PYENV_ROOT/pyenv" pull
      ;;
  esac
  PREFIX="$PYTHON_BUILD_PREFIX" "$PYENV_ROOT"/pyenv/plugins/python-build/install.sh
}

case "$1" in
  --version | -v)
    echo "$version"
    ;;

  "" | --help | -h)
    usage
    ;;

  global)
    case "$2" in
      -h | --help)
        echo "Usage: $CMD global [<version>]"
        ;;
      "")
        cat "$PYENV_ROOT/version"
        ;;
      *)
        PREFIX="$PYENV_ROOT/versions/$2"
        debug "$1: $PREFIX"
        if [[ ! -d "$PREFIX" ]]; then
          echo "$CMD: version '$2' not installed"
          exit 1
        fi
        # Remove the old link, if it exists.
        if [[ -L "$PYENV_ROOT/bin" ]]; then
          debug "$1: removing $PYENV_ROOT/bin"
          rm "$PYENV_ROOT/bin"
        fi
        echo "$CMD: $PYENV_ROOT/bin -> $PREFIX/bin"
        ln -sf "$PREFIX/bin" "$PYENV_ROOT/bin"
        echo "$2" > "$PYENV_ROOT/version"
        ;;
    esac
    ;;

  install)
    if [[ ! -x "$PYTHON_BUILD_BIN" ]]; then
      python-build "install"
    fi

    shift
    OPTIONS=()
    ARGUMENTS=()
    for arg; do
      if [[ "$arg" == "-"* ]]; then
        OPTIONS+=("$arg")
      else
        ARGUMENTS+=("$arg")
      fi
      shift
    done

    debug "$1: OPTIONS: ${OPTIONS[*]}"
    debug "$1: ARGUMENTS: ${ARGUMENTS[*]}"

    PREFIX_EXISTS=0
    cleanup() {
      if ((PREFIX_EXISTS)); then
        debug "install: cleanup: $PREFIX"
        rm -rf "$PREFIX"
      fi
    }
    trap cleanup SIGINT

    STATUS=0
    case "${#ARGUMENTS[@]}" in
      0)
        PYTHON_BUILD_CACHE_PATH="$PYTHON_BUILD_CACHE_PATH" \
          $PYTHON_BUILD_BIN "${OPTIONS[@]}" || STATUS=$?
        ;;
      1)
        DEFINITION="${ARGUMENTS[0]}"
        PREFIX="$PYENV_ROOT/versions/$DEFINITION"
        [[ -d "${PREFIX}" ]] && PREFIX_EXISTS=1

        if ((PREFIX_EXISTS)); then
          echo "$CMD: '$PREFIX' already exists"
          read -rp "$CMD: continue with installation? [y/n] "
          case "$REPLY" in
            y | Y) ;;
            *) exit 1 ;;
          esac
        fi

        PYTHON_BUILD_CACHE_PATH="$PYTHON_BUILD_CACHE_PATH" \
          $PYTHON_BUILD_BIN "${OPTIONS[@]}" "$DEFINITION" "$PREFIX" || STATUS=$?
        ;;
      *)
        echo "$CMD: invalid arguments: ${ARGUMENTS[*]}"
        exit 1
        ;;
    esac

    if ((STATUS != 0)); then
      cleanup
    fi
    exit $STATUS
    ;;

  uninstall)
    case "$2" in
      -h | --help)
        echo "Usage: $CMD uninstall <version>"
        ;;
      "" | -*)
        echo "$CMD: provide the Python version to uninstall"
        exit 1
        ;;
      *)
        DEFINITION="$2"
        PREFIX="$PYENV_ROOT/versions/$DEFINITION"
        debug "$1: $PREFIX"
        if [[ ! -d "$PREFIX" ]]; then
          echo "$CMD: version '$DEFINITION' not installed"
          exit 1
        fi
        echo "$CMD: remove $PREFIX"
        SYMLINK="$HOME/.local/bin/python${DEFINITION%.*}"
        if [[ -L "$SYMLINK" ]]; then
          echo "$CMD: unlink $SYMLINK"
        fi
        read -rp "$CMD: Continue? [y/n] "
        case "$REPLY" in
          y | Y)
            debug "$1: remove $PREFIX"
            rm -rf "$PREFIX"
            if [[ -L "$SYMLINK" ]]; then
              debug "$1: remove $SYMLINK"
              rm "$SYMLINK"
            fi
            echo "$CMD: $DEFINITION uninstalled"
            ;;
          *) exit 1 ;;
        esac
        ;;
    esac
    ;;

  versions)
    global=$(< "$PYENV_ROOT/version")
    for path in "$PYENV_ROOT/versions"/*; do
      if [[ -d "$path" ]]; then
        current="${path##*/}"
        if [[ "$current" == "$global" ]]; then
          echo "* $current"
        else
          echo "  $current"
        fi
      fi
    done
    ;;

  link)
    case "$2" in
      -h | --help)
        echo "Usage: $CMD link [-f | --force]"
        exit 0
        ;;
      -f | --force)
        FORCE=1
        ;&
      "")
        for path in "$PYENV_ROOT/versions"/*; do
          if [[ -d "$path" ]]; then
            version="${path##*/}"
            if [[ "$version" = *"-dev" ]]; then
              # If it's a dev version, let's keep it as it is.
              symlink="$HOME/.local/bin/python${version}"
            else
              # Extract out the "major.minor" part from the version string and
              # concatenate it to the end to make it valid pythonX.Y string.
              symlink="$HOME/.local/bin/python${version%.*}"
            fi
            if ((FORCE)) || [[ ! -e "$symlink" ]]; then
              ln -vsf "$path/bin/python" "$symlink"
            fi
          fi
        done
        ;;
      *)
        echo "$CMD: invalid argument: $2"
        exit 1
        ;;
    esac
    ;;

  update-deps)
    python-build "update"
    ;;

  install-deps)
    python-build "install"
    ;;

  root)
    echo "$PYENV_ROOT"
    ;;

  *)
    echo "$CMD: invalid command: $1"
    exit 1
    ;;
esac
