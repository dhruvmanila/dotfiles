#!/usr/bin/env bash
declare -i exitcode
exitcode=0

export PS4="\e[1m==> \e[0m"

BOLD="\e[1m"
RESET_ALL="\e[0m"
GREEN="\e[32m"
RED="\e[35m"

DOTFILES_DIRECTORY="${HOME}/dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/dhruvmanila/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/dhruvmanila/dotfiles"
HOMEBREW_INSTALL_LINK="https://raw.githubusercontent.com/Homebrew/install/master/install.sh"
GIT_COMPLETION_INSTALL_LINK="https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash"
VIM_PLUG_INSTALL_LINK="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

# -----------------------------------------------------

# If missing, download and extract the dotfiles repository
if [[ ! -d "${DOTFILES_DIRECTORY}" ]]; then
    printf "\n%b==> Downloading dotfiles... %b\n" "$BOLD" "$RESET_ALL"
    mkdir -p "${DOTFILES_DIRECTORY}"

    # Get the tarball
    if curl -fsSLo "${HOME}/dotfiles.tar.gz" "${DOTFILES_TARBALL_PATH}"; then
        printf "%b✓ Successfully downloaded the dotfiles %b\n" "$GREEN" "$RESET_ALL"
    else
        printf "%b✗ Failed to download the dotfiles %b\n" "$RED" "$RESET_ALL"
        exit 1
    fi

    # Extract to the dotfiles directory
    tar -zxf "${HOME}/dotfiles.tar.gz" --strip-components 1 -C "${DOTFILES_DIRECTORY}"
    if [ -d "${DOTFILES_DIRECTORY}" ]; then
        printf "%b✓ Successfully extracted the dotfiles %b\n" "$GREEN" "$RESET_ALL"
    else
        printf "%b✗ Failed to extract the dotfiles %b\n" "$RED" "$RESET_ALL"
        exit 1
    fi

    # Remove the tarball
    rm -rf "${HOME}/dotfiles.tar.gz"
fi

# ----------------------------------------------------

source "${DOTFILES_DIRECTORY}/lib/utils"
source "${DOTFILES_DIRECTORY}/lib/brew"

header "Changing directory to ${DOTFILES_DIRECTORY}"
cd "${DOTFILES_DIRECTORY}" || { error "Failed to change directory to ${DOTFILES_DIRECTORY}" >&2;exit 1; }
success "Done"

# ----------------------------------------------------

header "Checking for xcode command line tools..."
if ! xcode-select -p > /dev/null; then
    header "Installing xcode command line tools..."
    xcode-select --install > /dev/null

    # wait until the tools are installed...
    until xcode-select -p > /dev/null; do
        sleep 5;
    done
    # making sure we installed it
    if xcode-select -p > /dev/null; then
        success "Successfully installed xcode command line tools."
    else
        error "Failed to install xcode command line tools."
        exit 1
    fi
else
    success "xcode command line tools already installed."
fi

# ----------------------------------------------------

# Check for Homebrew
# Install homebrew and all the requested packages
header "Checking for homebrew..."
if ! type_exists 'brew'; then
    header "Installing Homebrew..."
    curl -fsSL ${HOMEBREW_INSTALL_LINK}
    if type_exists 'brew'; then
        success "Successfully installed homebrew"
        header "Installing packages..."
        run_brew
    else
        error "Failed to install homebrew."
        exit 1
    fi
else
    success "Homebrew already installed."
    header "Updating packages..."
    run_brew
fi

# ----------------------------------------------------

# Check for git
# Git will be installed with xcode command line tools. If not
# then install with homebrew
header "Checking for git..."
if ! type_exists 'git'; then
    header "Updating Homebrew..."
    brew update
    header "Installing Git with Homebrew..."
    brew install git
    if type_exists 'git'; then
        success "Successfully installed git."
    else
        error "Failed to install git."
        exit 1
    fi
else
    success "Git already installed."
fi

# ----------------------------------------------------

# Initialize the git repository if it's missing
# Necessary only if it's a fresh install
header "Checking for git repository..."
if ! is_git_repo; then
    header "Initializing git repository..."
    set -x
    git init
    git remote add origin "${DOTFILES_GIT_REMOTE}"
    git fetch --all
    git reset --hard FETCH_HEAD
    git clean -fd
    git pull --rebase --set-upstream origin master
    git submodule update --recursive --init
    set +x

    if is_git_repo; then
        success "Successfully initialized the git repository."
    else
        error "Failed to initialized the git repository."
        exit 1
    fi
else
    success "Git repository already initialized."
fi


# ----------------------------------------------------

# Download Git Auto-Completion
header "Checking for git-completion..."
if [[ ! -e "${HOME}/.git-completion.bash" ]]; then
    curl -fsSL $GIT_COMPLETION_INSTALL_LINK -o "${HOME}/.git-completion.bash"
    if [ -f "${HOME}/.git-completion.bash" ]; then
        success "Successfully downloaded git completion for bash."
    else
        error "Failed to download git completion for bash."
        exitcode=1
    fi
else
    success "Git completion already downloaded."
fi


# ----------------------------------------------------

# Download vim plugin manager
header "Checking for vim-plug..."
if [[ ! -e "${HOME}/dotfiles/vim/autoload" ]]; then
    curl -fsSLo ~/.vim/autoload/plug.vim --create-dirs $VIM_PLUG_INSTALL_LINK
    if [[ -f "${HOME}/.vim/autoload/plug.vim" ]]; then
        success "Successfully downloaded vim-plug. Use :PlugInstall to install the plugins."
    else
        error "Failed to download vim-plug."
        exitcode=1
    fi
else
    success "Vim-plug already downloaded. Use :PlugInstall to install the plugins."
fi


# ----------------------------------------------------

function link() {
    # Force create/replace the symlink.
    header "Creating symlink to ${2} in ${HOME} directory..."
    if ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"; then
        success "Successfully created symlink at ${HOME}/${2}"
        return 0
    else
        error "Failed to create symlink for ${1}"
        return 1
    fi
}

# ----------------------------------------------------


function mirrorfiles() {
    # all the private/extra files should go in a folder named 'private'
    if [[ -d "${DOTFILES_DIRECTORY}/private" ]]; then
        link "private/gitconfig"      ".gitconfig"
    fi

    # copy hushlogin as we are not going to be updating it
    cp "${DOTFILES_DIRECTORY}/assets/hushlogin" "${HOME}/.hushlogin"

    # Force remove the vim directory if it's already there.
    if [[ -e "${HOME}/.vim" ]]; then
        rm -rf "${HOME}/.vim"
    fi

    if [[ ! -d "${HOME}/.gnupg" ]]; then
        mkdir "${HOME}/.gnupg"
    fi

    # Create the necessary symbolic links between the `dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `dotfiles` repository.
    link "bash/bashrc"                ".bashrc"                || exitcode=1
    link "bash/bash_profile"          ".bash_profile"          || exitcode=1
    link "assets/inputrc"             ".inputrc"               || exitcode=1
    link "vim/vimrc"                  ".vimrc"                 || exitcode=1
    link "tmux/tmux.conf"             ".tmux.conf"             || exitcode=1
    link "assets/gitignore"           ".gitignore"             || exitcode=1
    link "vim"                        ".vim"                   || exitcode=1
    link "python/flake8"              ".config/flake8"         || exitcode=1
    link "python/pylintrc"            ".pylintrc"              || exitcode=1
    link "assets/gpg/gpg.conf"        ".gnupg/gpg.conf"        || exitcode=1
    link "assets/gpg/gpg-agent.conf"  ".gnupg/gpg-agent.conf"  || exitcode=1

    success "Dotfiles update complete!"
}

# ----------------------------------------------------

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
    mirrorfiles
    source "${HOME}/.bash_profile"
else
    printf "Continuing...\n"
fi


# ----------------------------------------------------

# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
    bash "${DOTFILES_DIRECTORY}/lib/osxdefaults"
    success "osx settings updated! You may need to restart."
else
    printf "Skipped osx settings update.\n"
fi

# ----------------------------------------------------
exit ${exitcode}
