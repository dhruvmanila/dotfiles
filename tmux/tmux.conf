# Prefix {{{

# Remap prefix from `C-b` to `C-a`
# Alternative: C-space
unbind-key C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# }}}
# Options {{{
# Server {{{

# Term info should refer to the $TERM type of the emulator.
set-option -s default-terminal "${TERM}"

# Reduce the timeout for which tmux waits after an escape is input to determine
# if it is part of a function or meta key sequence.
#
#   > Some people set it to zero but I consider that risky if you're connecting
#   > over a wide-area network or there is anything else that might insert small
#   > delays between the delivery of chars in such a sequence.
#
# Source: https://github.com/tmux/tmux/issues/353#issuecomment-294570322
set-option -s escape-time 0

# If the terminal supports focus events, they will be requested by the tmux
# client and passed through to the tmux server, then to the programs it runs.
# Necessary to be able to listen to `FocusGained` and `FocusLost`.
set-option -s focus-events on

# }}}
# Session {{{

# Display status line messages and other on-screen indicators for 1s
# (or until a key is pressed)
set-option -g display-time 1000

# Display the indicators shown by the display-panes command for 4s
set-option -g display-panes-time 4000

# Increase scrollback buffer size (2000 -> 50000)
#
# `history-limit` has nothing to do with the history of executed tmux commands.
# It controls the amount of lines you can scroll back when you enter copy mode.
set-option -g history-limit 50000

# Start window numbers at 1 to match keyboard order with tmux order.
#
# This also lets us run `:move-window -t :0` to move the current window in
# first position, although I have mappings to move windows around.
#
# `-g`: must be applied globally to all sessions
set-option -g base-index 1
# Same thing for panes ...
# This is a window option and should be applied globally to all windows.
set-option -gw pane-base-index 1

# Make tmux capture the mouse and allow mouse events to be bound as key bindings.
set-option -g mouse on

# When a window is closed in a session, automatically renumber the other windows
# in numerical order.
set-option -g renumber-windows on

# Time for repeating of a hotkey bound using the -r flag without having to type
# the prefix again. (default: 500)
set-option -g repeat-time 1000

# Show the status bar
#
# We can adjust the height of the status bar by passing in a number instead.
# The limit is 5
set-option -g status on

# Set the position of the window list in the status line
# Available: left, right, centre, absolute-centre
set-option -g status-justify absolute-centre

# Update the status line every interval seconds. A setting of zero disables
# redrawing at interval.
set-option -g status-interval 5

# emacs key bindings in tmux command prompt (prefix + :) are better than vi keys,
# even for vim users.
set-option -g status-keys emacs

# Color of the status line
#
# The background color of the status line is going to be the same and will be
# overriden by individual portion in `status-left` and `status-right` option.
set-option -g status-style "bg=#32302f"

# If you want to apply the same style all over the left part or the right part
# of the status line, you can use `status-left-style` or `status-right-style`.
#
# We will set it to 'none' as we are setting the style for individual 'portion'
# in the `status-left` and `status-right` option.
set-option -g status-left-style none
set-option -g status-right-style none

# By default, the length is 10 and 40 for left and right side respectively.
# We will make it even and increase the length to fit more components.
set-option -g status-left-length 100
set-option -g status-right-length 100

# From `man tmux /message-command-style`:
#
#   > `message-style` is used for messages and for the command prompt.
#   > `message-command-style` is used for the command prompt with vi keys when
#   > in command mode.
#
# If we are using vi keys in the command prompt, we can keep the styles separate
# as an indication, but as we are using emacs keys we will keep the style same.
set-option -g message-style "fg=#ebdbb2,bg=#504945"
set-option -g message-command-style "fg=#ebdbb2,bg=#504945"

# Set the contents of the status line
#
# '-a': append the value to the existing setting. Make sure the option was
# already set before.
set-option -g  status-left "#[fg=#282828,bg=#a89984,bold] #S "
#
# Empty string because the next portion is optional and if we try to append to
# a non-exiting option, it won't be pretty.
set-option -g  status-right ""
# A conditional:
#
#     `#{?test,val1,val2}`
#
# They can be chained as well.
set-option -ga status-right "\
#{?client_prefix,#[fg=black]#[bg=yellow] PREFIX ,\
#{?pane_in_mode,#[fg=black]#[bg=blue] COPY ,}}"
#
# To include datetime information, see `man strftime`.
set-option -ga status-right "#[fg=#ebdbb2,bg=#504945] %a %d %b "
set-option -ga status-right "| %H:%M "
set-option -ga status-right "| #(~/dotfiles/tmux/scripts/battery.sh) "
set-option -ga status-right "#[fg=#282828,bg=#a89984,bold] #H "

# Rationale: {{{
#
# When a new tmux session is created, all the environment variables are
# inherited from the parent process which in this case is kitty. So, in a new
# session these variables are correctly set. But, when I restart the kitty
# terminal, reattach the previous tmux sesion, I will get the *previous* values
# for these variables and not the updated values from the new kitty process.
#
# This option will *only* copy the values into the session environment and will
# NOT change the actual environment variables in the forked process. The updating
# is done through the $PROMPT_COMMAND (see ~/.bashrc)
#
#   > tmux cannot modify environment variables in programs that are already
#   > started. You will need to do it from inside the shell (you can get the
#   > updated value with tmux showenv)
#   >
#   > Yes there is no way for tmux to modify other running processes, only
#   > new ones get the updated environment.
#
# Source: https://github.com/tmux/tmux/issues/2834
# }}}
set-option -ga update-environment " KITTY_LISTEN_ON KITTY_WINDOW_ID"
#                                  │
#                                  └ this space is necessary as we are appending
#                                    to the previous value


# }}}
# Window {{{

# Turn off automatic renaming for the window globally.
set-option -gw automatic-rename off

# Use vi key bindings in copy mode.
set-option -gw mode-keys vi

# Border colors of focused and non-focused panes.
set-option -gw pane-border-style "fg=#504945"
set-option -gw pane-active-border-style "fg=#a89984"

# Set the type of characters used for drawing pane borders.
#
# This is mainly done to keep Vim and tmux borders distinct from each other.
# Vim borders are simple and tmux borders are heavy.
set-option -gw pane-border-lines heavy

# Sets the separator drawn between windows in the status line. The default is a
# single space character.
set-option -gw window-status-separator ""

# Set what to display for the current window (then for the other ones), and how,
# in the status line window list.
#
# '#I': window index
# '#W': window name
# '#F': window flags like '*' for current window, 'Z' for zoomed window, etc.
set-option -gw window-status-format "#[default] #I: #W #F "
set-option -gw window-status-current-format "#[fg=#ebdbb2,bg=#504945] #I: #W #F "

# }}}
# }}}
# Key Bindings {{{
#
# NOTE:
# bind-key -r ...: This key may repeat (see repeat-time option)
# bind-key -n ...: binds the key in the root table (`-n` is an alias for `-T root`)
# bind-key    ...: binds the key in the prefix table
#
# :list-keys => to list out all the keys
#
# If a key is bind in the root table, you don't have to press the prefix key
# before pressing the actual key. Be careful!

# prefix {{{

# prefix-e to reload the config file ('r' is used to rotate panes)
bind-key e source-file ~/.tmux.conf \; display-message "Reloaded ~/.tmux.conf"

# Sensible splits for panes by keeping the current working directory.
#
# '\': vertical split
# '-': horizontal split
# '|': full width vertical split
# '_': full width horizontal split
unbind-key '"'
unbind-key %
bind-key "\\" split-window -h  -c "#{pane_current_path}"
bind-key -    split-window -v  -c "#{pane_current_path}"
bind-key |    split-window -fh -c "#{pane_current_path}"
bind-key _    split-window -fv -c "#{pane_current_path}"

# Move between panes with vi keys
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Rotate tmux panes in clockwise and anti-clockwise direction.
# Similar to `C-w r` and `C-w R` in Vim.
bind-key -r r rotate-window -D \; select-pane -t :.+
bind-key -r R rotate-window -U \; select-pane -t :.-

# Move the current pane to the far left/right/bottom/top
# Similar to `C-w {H,L,J,K}` in Vim.
bind H split-window -fhb \; swap-pane -t ! \; kill-pane -t !
bind L split-window -fh  \; swap-pane -t ! \; kill-pane -t !
bind J split-window -fv  \; swap-pane -t ! \; kill-pane -t !
bind K split-window -fvb \; swap-pane -t ! \; kill-pane -t !

# Easy resizing of panes
bind-key -r C-j resize-pane -D 5
bind-key -r C-k resize-pane -U 5
bind-key -r C-h resize-pane -L 5
bind-key -r C-l resize-pane -R 5

# Easier and faster switching between next/prev window
bind-key C-p previous-window
bind-key C-n next-window

# Window moving
bind-key -r ">" swap-window -d -t +1
bind-key -r "<" swap-window -d -t -1

# Fast toggle between current and last-used window (normally prefix-l).
# This is inidicated by a '-' in the statusbar.
#
# prefix-space is next-layout by default but I'm not a heavy splits user.
bind-key C-Space last-window
bind-key Space last-window

# Enter copy mode
# bind-key Escape copy-mode
# }}}
# copy-mode-vi {{{

# Make `v`, `V` and `<C-v>` behave same as that of Vim.
#
# Source: https://github.com/lacygoill/config
bind-key -T copy-mode-vi v if -F '#{selection_present}' { send-keys -X clear-selection } { send-keys -X begin-selection }
bind-key -T copy-mode-vi V if -F '#{selection_present}' { send-keys -X clear-selection } { send-keys -X select-line }
bind-key -T copy-mode-vi C-v \
  if -F '#{selection_present}' \
    { if -F '#{rectangle_toggle}' \
      { send -X rectangle-toggle ; send -X clear-selection } \
      { send -X rectangle-toggle } } \
    { send -X begin-selection ; send -X rectangle-toggle }

bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi Y send-keys -X copy-end-of-line

# Disable copying through mouse selection
unbind-key -T copy-mode-vi MouseDragEnd1Pane
bind-key -T copy-mode-vi MouseDown1Pane send -X clear-selection

# For those times when C-c and q are not enough.
bind-key -T copy-mode-vi Escape send-keys -X cancel

# Incremental search similar to Vim when 'hlsearch' and 'incsearch' are both set.
# This will highlight all the matches as we type.
bind-key -T copy-mode-vi / command-prompt -ip "/" { send -X search-forward-incremental '%%%' }
bind-key -T copy-mode-vi ? command-prompt -ip "?" { send -X search-backward-incremental '%%%' }

# }}}
# }}}
# Plugins {{{
#
# Press prefix + I (capital i, as in Install) to fetch the plugin.
# Press prefix + alt + u (lowercase u as in uninstall) to remove the plugin.
# Press prefix + U (capital u as in Update) to update the plugin.

set-option -g @plugin 'tmux-plugins/tpm'
set-option -g @plugin 'tmux-plugins/tmux-resurrect'
set-option -g @plugin 'tmux-plugins/tmux-continuum'

# Default binding is: prefix (Alt + u) (lowercase u)
if-shell '[[ -f ~/.tmux/plugins/tpm/bindings/clean_plugins ]]' \
    'bind-key -T prefix C run-shell ~/.tmux/plugins/tpm/bindings/clean_plugins'

# Plugin settings

set-option -g @continuum-save-interval '10'

# Initialize TMUX plugin manager
# (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# }}}

# vim: foldmethod=marker
