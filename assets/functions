#!/usr/bin/env bash

dock-apps() { # {{{1
  # List out the bundle identifier of all the current dock applications.
  # Used for `MACOS_DOCK_APPLICATIONS` in `~/dotfiles/src/initialize.sh`
  defaults read com.apple.dock persistent-apps \
    | rg --only-matching '\s*"_CFURLString" = "file://(.*)/";' --replace '"$1"' \
    | sed 's/%20/ /g'
}

explain() { # {{{1
  # Explain whole commands using https://mankier.com
  local api_url
  api_url="https://www.mankier.com/api/v2/explain/?cols=$(($(tput cols) - 3))"
  if (($# == 0)); then
    while read -rp "$(printf "\e[1;37mCommand: \e[0m")" cmd; do
      if [[ "$cmd" == "" ]]; then
        break
      fi
      curl -s --get "$api_url" --data-urlencode "q=$cmd"
    done
  elif (($# == 1)); then
    curl -s --get "$api_url" --data-urlencode "q=$*"
  else
    echo "Usage:"
    echo "  explain                  interactive mode"
    echo "  explain 'cmd -o | ...'   one quoted command to explain it"
    return 1
  fi
}

gld() { # {{{1
  # Get the latest master for the git repository and show the diff between then
  # and now.
  #
  # $1 (string) (optional): remote name
  # $2 (string) (optional): HEAD branch name
  local curr_hash latest_hash
  curr_hash=$(git rev-parse HEAD)
  # These are optional arguments and if we quote them, the command will contain
  # empty string and `git` will complain.
  # shellcheck disable=SC2086
  git pull $1 $2
  latest_hash=$(git rev-parse HEAD)
  if [[ "$curr_hash" != "$latest_hash" ]]; then
    # `show` will display the commit message along with the diff.
    git show "$curr_hash".."$latest_hash" | delta --side-by-side
  fi
}

mcd() { # {{{1
  # Create a new directory and enter it
  mkdir -p "$@" && cd "$_" || return
}

n() { # {{{1
  # Purpose: Avoid opening
  # Block nesting of nnn in subshells
  if [ -n "$NNNLVL" ] && [ "${NNNLVL:-0}" -ge 1 ]; then
    echo "nnn is already running"
    return
  fi

  # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
  # To cd on quit only on ^G, remove the "export" as in:
  #
  #     export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
  #     ^----^
  #
  # NOTE: NNN_TMPFILE is fixed, should not be modified
  local NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

  nnn "$@"

  if [ -f "$NNN_TMPFILE" ]; then
    . "$NNN_TMPFILE"
    rm -f "$NNN_TMPFILE" > /dev/null
  fi
}

o() { # {{{1
  # `o` with no arguments opens the current directory, otherwise opens the given
  # location.
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}

pip-uninstall() { # {{{1
  # Uninstall all the Python packages for the current environment except for the
  # ones already included when the environment was created.
  python -m pip list \
    | awk 'NR>2 {if ($1 != "pip" && $1 != "setuptools") print $1}' \
    | xargs python -m pip uninstall --yes
}

pip-upgrade() { # {{{1
  # Upgrade the outdated Python packages for the current environment.
  python -m pip list --outdated \
    | awk 'NR>2 {print $1}' \
    | xargs python -m pip install --upgrade
}

py-kernel() { # {{{1
  # Create an IPython kernel for the current Python virtual environment.
  # This is useful to have one Jupyter installation but different Python kernels
  # for individual environments.
  #
  # $1 (string): name and display name of the kernal
  if [[ -z "$1" ]]; then
    echo "Usage: py-kernel <name>"
    return 1
  elif [[ -z "$VIRTUAL_ENV" ]]; then
    echo "py-kernel: not in a virtual environment"
    return 1
  fi
  python -m pip install --quiet ipykernel
  python -m ipykernel install --user --name "$1" --display-name "Python ($1)"
  echo "Use the 'Python ($1)' kernel for current venv in Jupyter"
}

py-upgrade-venv() { # {{{1
  # Upgrade the Python version for the current virtual environment.
  # NOTE: This assumes that we're using `pyenv` to install Python versions.
  #
  # $1 (string): upgrade to this version
  if [[ -z "$VIRTUAL_ENV" ]]; then
    echo "py-upgrade-venv: not in a virtual environment"
    return 1
  elif [[ -z "$1" ]]; then
    echo "Usage: py-upgrade-venv <version>"
    return 1
  fi
  python_exec="$(pyenv root)/versions/$1/bin/python"
  if [[ ! -e $python_exec ]]; then
    echo "py-upgrade-venv: version $1 does not exist"
    echo "py-upgrade-venv: Use 'pyenv install $1' to install it"
    return 1
  fi
  # The `--upgrade` flag assumes that Python was upgraded in place, so we need
  # to update the symlink to point to the desired Python version.
  echo "==> Updating the symlink..."
  ln -vsf "$python_exec" "$VIRTUAL_ENV/bin/python3"
  $python_exec -m venv --upgrade "$VIRTUAL_ENV"
}

viw() { # {{{1
  # Open a CLI script in vim
  # Mnemonic: (vi)m (w)hich
  local path
  path=$(which "$1")
  if [[ "$path" == "$(pyenv root)/shims/"* ]]; then
    path=$(pyenv which "$1")
  fi
  $EDITOR "$path"
}
