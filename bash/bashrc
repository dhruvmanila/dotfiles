#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091

# If not running interactively, don't do anything.
case $- in
  *i*) ;;
  *) return ;;
esac

# Source environment variables, aliases, functions and bash prompt.
#
# The assets file are kept so that zsh may source it as well.
for file in "assets/env" "assets/aliases" "assets/functions" "bash/bash_prompt"; do
  if [ -f "${HOME}/dotfiles/${file}" ]; then
    source "${HOME}/dotfiles/${file}"
  fi
done

# pyenv {{{

if command -v pyenv &> /dev/null; then
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
fi

# Disabling it as this slows down the prompt by injecting the function
# _pyenv_virtualenv_hook to $PROMPT_COMMAND
#
# if command -v pyenv-virtualenv-init &> /dev/null; then
#   eval "$(pyenv virtualenv-init -)"
# fi

# }}}
# Completions {{{

# Install programmable completion functions for the most common Unix commands.
# This requires the 'bash-completion@v2' package.
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && source "/usr/local/etc/profile.d/bash_completion.sh"

# Source fzf config which includes fuzzy completion and key-bindings.
#
# Do NOT edit this line! The installer can recognize the presence of this line
# and avoid duplication.
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# From `git-completion.bash`:
#
#   > If you have a command that is not part of git, but you would still
#   > like completion, you can use __git_complete:
#
# Function signature:
# 1: command or alias
# 2: function to call (e.g. `git`, `gitk`, `git_fetch`)
__git_complete g git

# We can use `complete | grep <command>` to find the options and functions
# used to define completion for the original command and use the same to for
# our alias completion.
complete -F _docker_compose dc
complete -F __youtube_dl yt
complete -F _pyenv p

# Heroku autocomplete (this takes 1-2 seconds of the startup time)
# if command -v heroku &> /dev/null; then
#   source <(heroku autocomplete:script bash)
# fi

# Kitty completions
if command -v kitty &> /dev/null; then
  source <(kitty + complete setup bash)
fi
# }}}
# Key Bindings {{{

# Automatic history expansion (`!!`) when inserting a space.
#
# WARNING: Don't write this in `~/.inputrc`, it would prevent us from inserting
# spaces inside various programs such as python, etc.
bind '" ": magic-space'

# }}}
# Shell Options {{{
#
# Set/unset each option using the '-s' and '-u' flag.
# For help on each option: `man bash` and search `list.*shopt`

# Typing a directory name alone is enough to cd into it
shopt -s autocd

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

# Lists the status of any stopped and running jobs before exiting an interactive
# shell. If any jobs are running, this causes the exit to be deferred until a
# second exit is attempted without an intervening command.
shopt -s checkjobs

# Automatically expand directory globs when completing
shopt -s direxpand

# Autocorrect directory typos when completing
shopt -s dirspell

# Enable the pattern `**` to match match all files and zero or more directories
# and subdirectories. `**/` matches any path to a folder.
shopt -s globstar

# Append to the Bash history file, rather than overwriting it.
shopt -s histappend

# After a history expansion, don't execute the resulting command immediately.
# Instead, write the expanded command into the readline editing  buffer for
# further modification.
shopt -s histverify

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# }}}

# vim: foldmethod=marker
