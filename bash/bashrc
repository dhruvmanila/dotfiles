#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091

# If not running interactively, don't do anything.
case $- in
  *i*) ;;
  *) return ;;
esac

# Sourcing {{{
# Warning: Don't move `Sourcing` after `Key bindings`! {{{
#
# It would give priority to the key bindings defined in third-party files over
# ours.
# }}}

# Source the environment variables
source ~/dotfiles/assets/env

# Source the common aliases and functions for bash and zsh
source ~/dotfiles/assets/aliases
source ~/dotfiles/assets/functions

# Install programmable completion functions for the most common Unix commands.
# This requires the 'bash-completion@v2' package.
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && source "/usr/local/etc/profile.d/bash_completion.sh"

# Source fzf config which includes fuzzy completion and key-bindings.
#
# Do NOT edit this line! The installer can recognize the presence of this line
# and avoid duplication.
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# Source the Bash prompt for gitstatus.
#
# https://github.com/romkatv/gitstatus
source "/usr/local/opt/gitstatus/gitstatus.prompt.sh"

# }}}
# Plugins {{{

# Initialize pyenv.
#
# The path initialization of pyenv (`pyenv init --path`) takes place in the
# `env` file to avoid duplicate entries in PATH.
if command -v pyenv &> /dev/null; then
  eval "$(pyenv init -)"
fi

# Disabling it as this slows down the prompt by injecting the function
# _pyenv_virtualenv_hook to $PROMPT_COMMAND
#
# if command -v pyenv-virtualenv-init &> /dev/null; then
#   eval "$(pyenv virtualenv-init -)"
# fi

# }}}
# Prompt {{{

function __build_prompt() { # {{{
  local -i exit="$?"

  local -r reset="\[\e[0m\]"
  local -r red="\[\e[0;31m\]"
  local -r green="\[\e[0;32m\]"
  local -r yellow="\[\e[0;33m\]"
  local -r blue="\[\e[1;34m\]"
  local -r white="\[\e[1;37m\]"
  local -r bold="\[\e[1m\]"

  # First line {{{
  PS1="\n"

  # Show the exit code if it is not 0
  if [[ $exit -ne 0 ]]; then
    PS1+="${red}✗ ${exit} "
  fi

  # Python virtual environment name
  if [[ -n $VIRTUAL_ENV ]]; then
    PS1+="${white}(${blue}$(basename "$VIRTUAL_ENV")${white}) "
  fi

  # Show username only if its root
  if [[ $USER == "root" ]]; then
    PS1+="${white}(${red}\u${white}) "
  fi

  # Show hostname only if its not local
  if [[ "${SSH_TTY}" ]]; then
    PS1+="${white}@${blue}\h "
  fi

  # Working directory [full path: \w] [basename: \W]
  PS1+="${green}\w"

  # Git repository details
  PS1+="${GITSTATUS_PROMPT:+ ${bold}${GITSTATUS_PROMPT}}"

  # }}}
  # Second line {{{
  # Line break / Space
  PS1+="\n"

  # Prompt character '$ '
  PS1+="${white}❯ ${reset}"

  # }}}
  # Other Prompt values {{{
  # Continuition prompt
  PS2="${yellow}→ ${reset}"

  # Debug prompt
  PS4="${white}==> ${reset}"
  # }}}
}
# }}}
function __refresh_env_in_tmux() { # {{{
  if [[ -n "$TMUX" ]]; then
    # NOTE: Only include the variables which needs to be udpated.
    for var in "KITTY_LISTEN_ON" "KITTY_WINDOW_ID"; do
      # Do NOT include the `-g` flag {{{
      #
      # In tmux, the global environment is different than the sesion
      # environment. These variables are updated in the session environment
      # through the `update-environment` option in `~/.tmux.conf`.
      #
      # See: `man tmux /global and session environment`
      # }}}
      source <(tmux show-environment -s $var)
    done
  fi
}
# }}}

# Set the various prompt commands (PS1, PS2, PS4) {{{
#
# Include previous values to maintain Apple Terminal support (window title
# path and sessions).
#
#   > If you customize PROMPT_COMMAND be sure to include the previous value. e.g.,
#   >
#   >   PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND; }your_code_here"
#
# Source: /etc/bashrc_Apple_Terminal:80 (Press 'gF' to go to the specified line)
# }}}
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND;}__build_prompt;__refresh_env_in_tmux"

# }}}
# Completions {{{

# From `git-completion.bash`:
#
#   > If you have a command that is not part of git, but you would still
#   > like completion, you can use __git_complete:
#
# Function signature:
# 1: command or alias
# 2: function to call (e.g. `git`, `gitk`, `git_fetch`)
__git_complete g git

# We can use `complete | grep <command>` to find the options and functions
# used to define completion for the original command and use the same to for
# our alias completion.
complete -F _docker_compose dc
complete -F __youtube_dl yt
complete -F _pyenv p

# Heroku autocomplete (this takes 1-2 seconds of the startup time)
# if command -v heroku &> /dev/null; then
#   source <(heroku autocomplete:script bash)
# fi

# Kitty completions
if command -v kitty &> /dev/null; then
  source <(kitty + complete setup bash)
fi

# }}}
# Key Bindings {{{

# Automatic history expansion (`!!`) when inserting a space.
#
# WARNING: Don't write this in `~/.inputrc`, it would prevent us from inserting
# spaces inside various programs such as python, etc.
bind '" ": magic-space'

# }}}
# Shell Options {{{
#
# Set/unset each option using the '-s' and '-u' flag.
# For help on each option: `man bash` and search `list.*shopt`

# Typing a directory name alone is enough to cd into it
shopt -s autocd

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

# Lists the status of any stopped and running jobs before exiting an interactive
# shell. If any jobs are running, this causes the exit to be deferred until a
# second exit is attempted without an intervening command.
shopt -s checkjobs

# Automatically expand directory globs when completing
shopt -s direxpand

# Autocorrect directory typos when completing
shopt -s dirspell

# Enable the pattern `**` to match match all files and zero or more directories
# and subdirectories. `**/` matches any path to a folder.
shopt -s globstar

# Append to the Bash history file, rather than overwriting it.
shopt -s histappend

# After a history expansion, don't execute the resulting command immediately.
# Instead, write the expanded command into the readline editing  buffer for
# further modification.
shopt -s histverify

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# }}}

# vim: foldmethod=marker
