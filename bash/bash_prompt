#!/usr/bin/env bash

source /usr/local/opt/gitstatus/gitstatus.plugin.sh

# Return the git status to reflect the state of the current git repository.
# The value is empty if not in a git repository. Forwards all arguments to
# gitstatus_query.
#
# Example value: master ⇣42⇡42 ⇠42⇢42 *42 merge ~42 +42 !42 ?42
#
#   master  current branch
#      ⇣42  local branch is 42 commits behind the remote
#      ⇡42  local branch is 42 commits ahead of the remote
#      ⇠42  local branch is 42 commits behind the push remote
#      ⇢42  local branch is 42 commits ahead of the push remote
#      *42  42 stashes
#    merge  merge in progress
#      ~42  42 merge conflicts
#      +42  42 staged changes
#      !42  42 unstaged changes
#      ?42  42 untracked files
function gitstatus_prompt_update() {
  gitstatus_query "$@"                  || return 1  # error
  [[ "$VCS_STATUS_RESULT" == ok-sync ]] || return 0  # not a git repo

  local      reset="\[\e[0m\]"     # no color
  local      clean="\[\e[1;32m\]"  # green foreground
  local  untracked="\[\e[1;34m\]"  # blue foreground
  local   modified="\[\e[1;33m\]"  # yellow foreground
  local conflicted="\[\e[1;31m\]"  # red foreground

  local p

  local where  # branch name, tag or commit
  if [[ -n "$VCS_STATUS_LOCAL_BRANCH" ]]; then
    where="$VCS_STATUS_LOCAL_BRANCH"
  elif [[ -n "$VCS_STATUS_TAG" ]]; then
    p+="${reset}#"
    where="$VCS_STATUS_TAG"
  else
    p+="${reset}@"
    where="${VCS_STATUS_COMMIT:0:8}"
  fi

  ((${#where} > 32))   && where="${where:0:12}…${where: -12}"  # truncate long branch names and tags
  p+="${clean}${where}"

  # ⇣42 if behind the remote.
  ((VCS_STATUS_COMMITS_BEHIND))   && p+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"
  # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
  ((VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND))   && p+=" "
  ((VCS_STATUS_COMMITS_AHEAD))    && p+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"
  # ⇠42 if behind the push remote.
  ((VCS_STATUS_PUSH_COMMITS_BEHIND))   && p+=" ${clean}⇠${VCS_STATUS_PUSH_COMMITS_BEHIND}"
  ((VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND))   && p+=" "
  # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.
  ((VCS_STATUS_PUSH_COMMITS_AHEAD))    && p+="${clean}⇢${VCS_STATUS_PUSH_COMMITS_AHEAD}"
  # *42 if have stashes.
  ((VCS_STATUS_STASHES))          && p+=" ${clean}*${VCS_STATUS_STASHES}"
  # 'merge' if the repo is in an unusual state.
  [[ -n "$VCS_STATUS_ACTION"   ]] && p+=" ${conflicted}${VCS_STATUS_ACTION}"
  # ~42 if have merge conflicts.
  ((VCS_STATUS_NUM_CONFLICTED))   && p+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
  # +42 if have staged changes.
  ((VCS_STATUS_NUM_STAGED))       && p+=" ${modified}+${VCS_STATUS_NUM_STAGED}"
  # !42 if have unstaged changes.
  ((VCS_STATUS_NUM_UNSTAGED))     && p+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"
  # ?42 if have untracked files. It's really a question mark, your font isn't broken.
  ((VCS_STATUS_NUM_UNTRACKED))    && p+=" ${untracked}?${VCS_STATUS_NUM_UNTRACKED}"

  echo -e "${p}${reset}"
}

# Start gitstatusd in the background.
gitstatus_stop && gitstatus_start -s -1 -u -1 -c -1 -d -1

function build_prompt() {
  local -i exit="$?"
  local git_prompt

  local -r reset="\[\e[0m\]"
  local -r red="\[\e[0;31m\]"
  local -r yellow="\[\e[0;33m\]"
  local -r blue="\[\e[1;34m\]"
  local -r white="\[\e[1;37m\]"

  PS1="\n"

  # --------------- First line -----------------
  # Prompt - [exitcode] [(root)] [@hostname] pwd [on branch [status]]
  # Show the exit code if it is not 0
  if [[ $exit -ne 0 ]]; then
    PS1+="${red}✗ ${exit} "
  fi

  # Python virtual environment name
  if [[ -n $VIRTUAL_ENV ]]; then
    PS1+="${white}(${blue}$(basename "$VIRTUAL_ENV")${white}) "
  fi

  # Show username only if its root
  if [[ $USER == "root" ]]; then
    PS1+="${white}(${red}\u${white}) "
  fi

  # Show hostname only if its not local
  if [[ "${SSH_TTY}" ]]; then
    PS1+="${white}@${blue}\h "
  fi

  # Working directory [full path: \w] [basename: \W]
  PS1+="${yellow}\w"

  # Git repository details
  git_prompt="$(gitstatus_prompt_update "$@")"
  if [[ -n "${git_prompt}" ]]; then
    PS1+="${white} on ${git_prompt}"
  fi

  # --------------- Second line -----------------
  # Line break / Space
  PS1+="\n"

  # Prompt character '$ '
  PS1+="❯ ${reset}"

  # ---------------------------------------------
  # Continuition prompt
  PS2="${yellow}→ ${reset}"

  # Debug prompt
  PS4="${white}==> ${reset}"

}

# Include previous values to maintain Apple Terminal support (window title
# path and sessions). From /etc/bashrc_Apple_Terminal:
#
#   > If you customize PROMPT_COMMAND be sure to include the previous value. e.g.,
#   >
#   >   PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND; }your_code_here"
#
# Set the various prompt commands (PS1, PS2, PS4)
PROMPT_COMMAND="build_prompt${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
