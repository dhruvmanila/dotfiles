" Comments in Vimscript start with a `"`.

" VI compatible mode is disabled so that VIm things work
set nocompatible

" Set leader key
let mapleader=" "       " leader is space

" =============================================================================
"   PLUGINS
" =============================================================================
call plug#begin('~/.vim/plugged')

" Colorschemes (Monokai forever)
" This contains colors for terminal, lightline and airline
Plug 'patstockwell/vim-monokai-tasty'
Plug 'altercation/vim-colors-solarized'
Plug 'KeitaNakamura/neodark.vim'

" Search
Plug 'romainl/vim-cool'

" Syntactic language support
Plug 'vim-python/python-syntax'
Plug 'dense-analysis/ale'
Plug 'maximbaz/lightline-ale'

" GUI enhancements
Plug 'itchyny/lightline.vim'
Plug 'mhinz/vim-startify'
Plug 'preservim/nerdtree'

" Git plugin
Plug 'tpope/vim-fugitive'

call plug#end()

" =============================================================================
"  EDITOR SETTINGS
" =============================================================================

" Colorscheme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"colorscheme neodark
"let g:neodark#use_256color = 1

"let g:vim_monokai_tasty_italic = 1
colorscheme vim-monokai-tasty

" If you don't know what the name of a particular hightlight is, you can use
" `What`. It will print out the syntax group that the cursor is currently above.
" from https://www.reddit.com/r/vim/comments/6z4aau/how_to_stop_vim_from_autohighlighting_italics_in/
command! What echo synIDattr(synID(line('.'), col('.'), 1), 'name')

"colorscheme solarized
"set background=dark
"let g:solarized_termcolors=256

" Turn on syntax highlighting.
syntax on

" Turn on filetype plugins
if has('autocmd')
  filetype plugin indent on
endif

if !has('gui_running')
  set t_Co=256
endif


" UI Config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set number              " show line numbers
set relativenumber      " show relative numbering
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set wildmenu            " visual autocomplete for command menu
set showmatch           " highlight matching [{()}]
set laststatus=2        " Show the status line at the bottom
set mouse+=a            " A necessary evil, mouse support
set noerrorbells visualbell t_vb=    "Disable annoying error noises
set splitbelow          " Open new vertical split bottom
set splitright          " Open new horizontal splits right
set linebreak           " Have lines wrap instead of continue off-screen
set scrolloff=12        " Keep cursor in approximately the middle of the screen
set updatetime=100      " Some plugins require fast updatetime
set ttyfast             " Improve redrawing
set shortmess+=I        " Disable the default Vim startup message
set ruler               " Show the cursor position
set title               " Show the filename in window titlebar
set nostartofline       " Don't set cursor to start of line when moving around
set gdefault            " Add the g flag to search/replace by default
set wildmode=longest,list,full " Tab completion for files/buffers
" Use system clipboard by default so that you can
" CtrlC in other programs and put in Vim with p on all three platforms,
" yank in Vim with y and CtrlV in other programs on all three platforms.
" Support for Linux selection clipboard as well.
set clipboard^=unnamed,unnamedplus
set encoding=utf-8
set backupcopy=yes      " see :help crontab
set autoread            " reload files when changed on disk, i.e. via `git checkout`

" Buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set hidden              " Allows having hidden buffer (not displayed in any window)

" Sensible stuff
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set backspace=indent,eol,start

" Automatic reloading of .vimrc on save
autocmd! bufwritepost .vimrc source %

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Searching
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set ignorecase          " Ignore case in searches by default
set smartcase           " But make it case sensitive if an uppercase is entered
" turn off search highlight
nnoremap <Leader>h :nohlsearch<cr>
vnoremap <Leader>h :nohlsearch<cr>

" Centralize backups, swapfiles and undo history
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set backupdir=~/.vim/backups/
set directory=~/.vim/swaps/
set undofile
set undodir=~/.vim/undo/

" Lose bad habits
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Try to prevent bad habits like using the arrow keys for movement. This is
" not the only possible bad habit. For example, holding down the h/j/k/l keys
" for movement, rather than using more efficient movement commands, is also a
" bad habit. Don't want it in insert mode as it's necessary to navigate while
" writing

" Normal Mode
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>

" Visual Mode
vnoremap <Left>  :echoe "Use h"<CR>
vnoremap <Right> :echoe "Use l"<CR>
vnoremap <Up>    :echoe "Use k"<CR>
vnoremap <Down>  :echoe "Use j"<CR>


" =============================================================================
"   PLUGIN CONFIG
" =============================================================================

let g:startify_custom_header = []     " Disable startify header

" ALE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ale_enabled = 1
" For quick startup
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1
let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \}
" Keep the sign gutter open
let g:ale_sign_column_always = 1
" Navigate between errors
nmap <silent> [a <Plug>(ale_previous_wrap)
nmap <silent> ]a <Plug>(ale_next_wrap)

" Lightline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" --INSERT-- is unncessary because of lightline
set noshowmode

let g:lightline = {
	\ 'colorscheme': 'monokai_tasty',
	\ 'component': {
	\   'lineinfo': ' %3l:%-2c%<',
	\ },
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ],
	\             [ 'gitbranch', 'readonly', 'filename', ] ],
	\   'right': [ [ 'linter_errors', 'linter_warnings', 'linter_infos', 'lineinfo' ] ,
	\            [ 'percent' ],
	\            [ 'fileencoding', 'filetype' ] ]
	\ },
	\ 'component_function': {
	\   'gitbranch': 'LightlineFugitive',
	\   'filename': 'LightlineFilename',
	\   'readonly': 'LightlineReadonly',
	\   'fileencoding': 'LightlineFileencoding',
	\   'filetype': 'LightlineFiletype',
	\ },
	\ 'component_expand': {
        \   'linter_infos': 'lightline#ale#infos',
        \   'linter_warnings': 'lightline#ale#warnings',
        \   'linter_errors': 'lightline#ale#errors',
	\ },
	\ 'component_type': {
        \   'linter_infos': 'right',
        \   'linter_warnings': 'warning',
        \   'linter_errors': 'error',
	\ },
	\ 'separator': { 'left': '', 'right': '' },
	\ 'subseparator': { 'left': '', 'right': '' },
	\ }

let g:lightline#ale#indicator_infos = "\uf129"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"

function! LightlineFugitive()
  if exists('*FugitiveHead')
    let branch = FugitiveHead()
    return branch !=# '' ? ''.branch : ''
  endif
  return ''
endfunction

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction


" Minor Configs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" NERDTree
" Set key to Ctrl-n to open nerd tree
" Close vim if only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <C-n> :NERDTreeToggle<CR>
